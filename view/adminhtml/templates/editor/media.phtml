<?php
/**
 * @package Goomento_PageBuilder
 * @link https://github.com/Goomento/PageBuilder
 */

declare(strict_types=1);
/**
 * @var MediaUploader $block
 */

use Goomento\PageBuilder\Helper\DataHelper;
use Goomento\PageBuilder\Block\Adminhtml\Editor\MediaUploader;
use Goomento\PageBuilder\Helper\RequestHelper;
use Goomento\PageBuilder\Helper\UrlBuilderHelper;
use Magento\Framework\UrlInterface;

$storeId = (int) RequestHelper::getParam('store', 0);
if (DataHelper::getCustomMediaUrl()) {
    $mediaUrl = DataHelper::getCustomMediaUrl();
} else {
    $mediaUrl = UrlBuilderHelper::getFrontendUrl('', [
        '_type' => UrlInterface::URL_TYPE_MEDIA,
        'store_id' => $storeId,
    ]);
}
?>
<div class="gmt-image-bucket" style="height: 0;width: 0">
    <input type="hidden" id="gmt_image_bucket">
</div>
<script>
    require([
        'jquery',
        'mage/adminhtml/browser',
        'underscore',
    ], function ($, _) {
        'use strict';

        const
            htmlId = 'gmt_image_bucket',
            openDialogUrl = '<?= $block->escapeUrl($block->getMediaUploadUrl('gmt_image_bucket', (int) $storeId)) ?>',
            goomentoMediaUrl = "<?=  /** @noEscape */ $mediaUrl ?>";

        window.gmtMediaUploader = {
            imageUrl: '',
            /**
             * @inheritDoc
             * @private
             */
            _create: function() {
                $(`#${htmlId}`).change(this.onChange.bind(this));
                window.mediaBucket = this;
            },
            /**
             * Get full media file
             * @param rawUrl
             * @returns {string|*}
             * @private
             */
            _getFileUrl: function (rawUrl) {
                let matched = rawUrl.match(/___directive\/([a-zA-Z0-9,]*)/i),
                    url = rawUrl;
                if (matched && matched[1]) {
                    let widget = Base64.mageDecode(matched[1]);
                    widget = widget.match(/url=(\"|\')([^\"\']+)(\"|\')/i);
                    if (widget && widget[2]) {
                        url = widget[2];
                    }
                }

                return this._isUrl(url) ?
                    url : goomentoMediaUrl.replace(/\/$/, '') + '/' + url;
            },
            /**
             * Check whether is url or not
             * @param urlString
             * @returns {boolean}
             * @private
             */
            _isUrl: function (urlString) {
                let urlPattern = new RegExp('^(https?:\\/\\/)?'+ // validate protocol
                    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // validate domain name
                    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // validate OR ip (v4) address
                    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // validate port and path
                    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // validate query string
                    '(\\#[-a-z\\d_]*)?$','i'); // validate fragment locator
                return !!urlPattern.test(urlString);
            },
            onChange: function () {
                let filePathname = ($(`#${htmlId}`).val() || '').trim();
                if (filePathname !== '') {
                    this.imageUrl = this._getFileUrl(filePathname);
                    $(this).trigger('selected').off('selected');
                    // Reset the image in bucket
                    $(`#${htmlId}`).val('');
                }
            },
            /**
             * Open media frame
             * @returns {Window.gmtMediaUploader}
             */
            openFrame: function() {
                this.imageUrl = '';
                MediabrowserUtility.openDialog(openDialogUrl, null, null, null, {
                    'targetElementId': htmlId,
                    'closed': this._onModalClose
                });
                return this;
            },
            /**
             * On close frame
             * @private
             */
            _onModalClose: function () {
                if (window !== window.parent &&
                    typeof window.parent.mediaBucket !== "undefined") {
                    window.parent.mediaBucket.closeFrame();
                }
            },
            get: function () {
                return {
                    url: this.imageUrl
                };
            },
            /**
             * Wait for media stop return the file
             * @param callback
             * @returns {Window.mediaBucket}
             */
            onSelected: function (callback) {
                if (this.callback) {
                    $(this).off('selected', this.callback);
                }
                $(this).on('selected', callback);
                this.callback = callback;
                return this;
            },
        };

        gmtMediaUploader._create();
    });
</script>
<style>
    aside.modal-slide {
        width: 100% !important;
        left: 0 !important;
    }
</style>
